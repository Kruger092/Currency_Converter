{"version":3,"sources":["CurrencyRow.js","Main.js","App.js","redux/reducer.js","index.js"],"names":["CurrencyRow","currency","changeCurrency","amount","onChangeAmount","isDisabledInput","isDisabledSelect","checkedOption","find","item","checked","type","className","value","onChange","e","newValue","target","disabled","newCheckedValue","newCurrency","map","label","option","keys","BASE_URL","Main","dispatch","useDispatch","stateFromstore","useSelector","state","fromCurrency","fromAmount","toCurrency","toAmount","exchangeRate","changeFromCurrencyHandler","newFromCurrency","changeToCurrencyHandler","newToCurrency","changeToAmountHandler","useEffect","fetch","then","res","json","data","Object","rates","currentFromCurrency","window","navigator","language","getCurrencyByLanguage","filter","index","length","checkedFromCurrency","checkedToCurrency","changeRateHandler","store","createStore","previosStore","action","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.daa69d57.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrencyRow({\r\n    currency,\r\n    changeCurrency,\r\n    amount,\r\n    onChangeAmount,\r\n    isDisabledInput,\r\n    isDisabledSelect,\r\n}) {\r\n    const checkedOption = currency.find(item => item.checked === true)\r\n\r\n    const changeCurrencyHandler = e => {\r\n        const newCheckedValue = e.target.value;\r\n\r\n        const newCurrency = currency.map(item => {\r\n            if (item.checked === true) {\r\n                return { ...item, checked: false }\r\n            }\r\n\r\n            if (item.label === newCheckedValue) {\r\n                return { ...item, checked: true }\r\n            }\r\n\r\n            return item\r\n        })\r\n\r\n        changeCurrency(newCurrency)\r\n    }\r\n\r\n    const onChangeHandler = e => {\r\n        const newValue = e.target.value\r\n        if (newValue >= 0) {\r\n            onChangeAmount(newValue)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"number\"\r\n                className=\"input\"\r\n                value={amount}\r\n                onChange={onChangeHandler}\r\n                disabled={isDisabledInput}\r\n            />\r\n            <select value={checkedOption.value} onChange={changeCurrencyHandler} disabled={isDisabledSelect}>\r\n                {currency.map((option, keys) => (\r\n                    <option key={keys} value={option.label}>{option.label}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './App.css';\r\nimport CurrencyRow from './CurrencyRow'\r\n\r\nconst BASE_URL = 'http://api.exchangeratesapi.io/v1/latest?access_key=5f3ecaaee9876611868c238684070534&symbols=EUR,USD,UAH,RUB,JPY,CAD'\r\n\r\n/**Бесплатная версия API работает только с EUR. Иначе можно было бы менять валюту в зависимости от языка браузера правильно.\r\nЛегко также добавлять дополнительную валюту прописав в URL нужную.**/\r\n\r\nconst getCurrencyByLanguage = () => {\r\n  let currency = ''\r\n\r\n  switch (window.navigator.language) {\r\n    case \"ru\":\r\n      currency = 'EUR'\r\n      break;\r\n    case \"ua\":\r\n      currency = 'EUR'\r\n      break;\r\n    case \"en\":\r\n      currency = 'EUR'\r\n      break;\r\n    default:\r\n      currency = 'EUR'\r\n  }\r\n\r\n  return currency\r\n}\r\n\r\nfunction Main() {\r\n  const dispatch = useDispatch()\r\n  const stateFromstore = useSelector(state => state)\r\n  const { fromCurrency, fromAmount, toCurrency, toAmount, exchangeRate } = stateFromstore\r\n\r\n  const changeFromCurrencyHandler = newFromCurrency => {\r\n    dispatch({\r\n      type: \"CHANGE_FROM_CURRENCY\",\r\n      newFromCurrency: newFromCurrency,\r\n    })\r\n  }\r\n\r\n  const changeToCurrencyHandler = newToCurrency => {\r\n    dispatch({\r\n      type: \"CHANGE_TO_CURRENCY\",\r\n      newToCurrency: newToCurrency,\r\n    })\r\n  }\r\n\r\n  const changeFromAmountHandler = fromAmount => {\r\n    dispatch({\r\n      type: \"CHANGE_FROM_AMOUNT\",\r\n      fromAmount: fromAmount,\r\n    })\r\n  } \r\n\r\n  const changeToAmountHandler = toAmount => {\r\n    dispatch({\r\n      type: \"CHANGE_TO_AMOUNT\",\r\n      toAmount: toAmount,\r\n    })\r\n  } \r\n\r\n  const changeRateHandler = exchangeRate => {\r\n    dispatch({\r\n      type: \"CHANGE_RATE\",\r\n      exchangeRate: exchangeRate,\r\n    })\r\n  } \r\n\r\n  useEffect(() => {\r\n    fetch(BASE_URL)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n\r\n        const currency = [...Object.keys(data.rates)]\r\n\r\n        const currentFromCurrency = getCurrencyByLanguage();\r\n\r\n        const newFromCurrency = [\r\n          { label: currentFromCurrency, checked: true }\r\n        ]\r\n        changeFromCurrencyHandler(newFromCurrency)\r\n\r\n        const newToCurrency = currency\r\n          .filter(item => item !== currentFromCurrency)\r\n          .map((item, index) => {\r\n            return {\r\n              label: item,\r\n              checked: index === 0 ? true : false,\r\n            }\r\n          })\r\n        changeToCurrencyHandler(newToCurrency)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (fromCurrency.length && toCurrency.length) {\r\n      const checkedFromCurrency = fromCurrency.find(item => item.checked === true)\r\n      const checkedToCurrency = toCurrency.find(item => item.checked === true)\r\n\r\n      fetch(`${BASE_URL}&base=${checkedFromCurrency.label}&symbols=${checkedToCurrency.label}`)\r\n        .then(res => res.json())\r\n        .then(data => changeRateHandler(data.rates[checkedToCurrency.label]))\r\n    }\r\n  }, [fromCurrency, toCurrency])\r\n\r\n  useEffect(() => {\r\n    if (fromAmount && exchangeRate) {\r\n      const newToAmount = fromAmount * exchangeRate\r\n      changeToAmountHandler(newToAmount)\r\n    }\r\n  }, [fromAmount, exchangeRate])\r\n\r\n  return (\r\n    <>\r\n      <h1>Currency Converter</h1>\r\n      {(fromCurrency.length && toCurrency.length) && (\r\n        <>\r\n          <CurrencyRow\r\n            currency={fromCurrency}\r\n            changeCurrency={changeFromCurrencyHandler}\r\n            amount={fromAmount}\r\n            onChangeAmount={changeFromAmountHandler}\r\n            isDisabledInput={false}\r\n            isDisabledSelect={true}\r\n          />\r\n          <div className=\"equals\">=</div>\r\n          <CurrencyRow\r\n            currency={toCurrency}\r\n            changeCurrency={changeToCurrencyHandler}\r\n            amount={toAmount}\r\n            onChangeAmount={changeToAmountHandler}\r\n            isDisabledInput={true}\r\n            isDisabledSelect={false}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\nimport Main from './Main'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport { rootReducer } from './redux/reducer'\nimport './App.css'\n\nconst initialState = {\n  fromCurrency: [],\n  fromAmount: 0,\n  toCurrency: [],\n  toAmount: 0,\n  exchangeRate: '',\n}\n\nlet store = createStore(rootReducer, initialState);\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  )\n}\n\nexport default App;\n","export const rootReducer = function (previosStore, action) {\r\n   switch (action.type) {\r\n      case \"CHANGE_FROM_CURRENCY\":\r\n         return {\r\n            ...previosStore,\r\n            fromCurrency: action.newFromCurrency\r\n         }\r\n      case \"CHANGE_TO_CURRENCY\":\r\n         return {\r\n            ...previosStore,\r\n            toCurrency: action.newToCurrency\r\n         }\r\n      case \"CHANGE_FROM_AMOUNT\":\r\n         return {\r\n            ...previosStore,\r\n            fromAmount: action.fromAmount\r\n         }\r\n      case \"CHANGE_TO_AMOUNT\":\r\n         return {\r\n            ...previosStore,\r\n            toAmount: action.toAmount\r\n         }\r\n      case \"CHANGE_RATE\":\r\n         return {\r\n            ...previosStore,\r\n            exchangeRate: action.exchangeRate\r\n         }\r\n      default:\r\n         return previosStore;\r\n   }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}